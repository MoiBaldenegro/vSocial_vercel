---
import Layout from "../layouts/Layout.astro";
import FeatureCard from "../components/FeatureCard.astro";
import Testimonial from "../components/Testimonial.astro";
import UserResultsCarousel from "../components/UserResultsCarousel.astro";
import { CldUploadWidget } from "astro-cloudinary";
import { getCldImageUrl } from "astro-cloudinary/helpers";
import { transformerModel } from "../utils/transformer/transformerModel";
import Header from "../components/Header.astro";
import Hero from "../components/Hero.astro";
import UploadWidget from "../components/UploadWidget.astro";
import Features from "../components/Features.astro";
import Testimonials from "../components/Testimonials.astro";
import { getI18n } from "../i18n";
import StyleSelector from "./StyleSelector.astro";
import Loader from "./Loader.astro";
const { currentLocale = "en" } = Astro;
const i18n = getI18n({ currentLocale });
---

<Layout title="SocialPicAI">
  <main class="container mx-auto md:px-4 md:py-8 px-8" id="main-container">
    <Hero />
    <UploadWidget />
    <div class="relative" id="transform-data-container" style="display: none;">
      <Loader />

      <div id="preview-image-container" style="display: none;">
        <div id="container-inner">
          <h3>Estilo: Aleatorio</h3>
          <div id="transform-info">
            <button
              id="style-selector-button"
              style="display: none;"
              class="flex gap-4 items-center bg-custom-linear uppercase transition-opacity duration-300 hover:opacity-80 text-white font-bold py-4 px-8 rounded-xl transition ease text-2xl mt-2"
            >
              Subir otra imagen <img
                src="return.svg"
                class="size-[42px]"
                alt="upload icon"
              /></button
            >
          </div>
        </div>
      </div>
    </div>
    <div
      id="results"
      class="w-fit mx-auto my-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
      style="display: none;"
    >
      <!-- Los resultados se mostrarán aquí -->
    </div>
    <StyleSelector />
  </main>
  <div id="last" style="display: none;">
    <button
      id="reset-button"
      style="display:none"
      class="flex gap-4 items-center bg-custom-linear uppercase transition-opacity duration-300 hover:opacity-80 text-white font-bold py-6 px-12 rounded-xl transition ease text-3xl mt-2"
      >Resetear <img src="./reset.svg" class="size-[42px]" alt="" /></button
    >
  </div>
  <UserResultsCarousel />
  <Features />
  <Testimonials />
</Layout>
<style>
  #last {
    height: 200px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 100px;
  }

  #transform-data-container {
    width: fit-content;
    min-width: 900px;
    height: 450px;
    margin: 0px auto;
    border-radius: 16px;
  }

  #preview-image-container {
    padding: 16px;
    height: 100%;
    display: flex;
    gap: 16px;

    > img {
      height: 100%;
    }

    #transform-info {
      display: flex;
      gap: 16px;
      position: relative;

      > button {
        height: 96px;
        padding: 16px;
        border-radius: 16px;
      }
    }

    #buttons-container {
      gap: 16px;
    }

    button {
      white-space: nowrap;
      padding: 8px 16px !important;
      display: flex !important;
    }

    #info {
      border: 2px solid red;
      display: flex;
      justify-content: center;
      align-items: center;
      flex: 1;
      height: 100%;
    }

    #container-inner {
      display: flex;
      flex-direction: column;
      height: 100%;
      width: fit-content;
      padding: 16px;
      border-radius: 16px;
      background-color: rgba(128, 128, 128, 0.185);

      > h3 {
        flex: 1;
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
      }
    }
  }
</style>
<script>
  import { navigate } from "astro:transitions/client";
  import { transformerModel } from "../utils/transformer/transformerModel";
  import { getCldImageUrl } from "astro-cloudinary/helpers";
  import { facebookPreview } from "../templates/preview";
  import { PreviewsOptions } from "../types/previews.types";
  import { descargarZip } from "../utils/dowloader/downloader";
  import { promtsOptions } from "../configs/promts";
  import { randomState } from "../utils/randomState";
  import { styleSectionsPromts } from "../configs/promts";

  const dialog = document.querySelector("dialog");
  const widget = document.getElementById("local-widget");
  let downloads: [] = [];
  import { networksFormats } from "../configs/formats";
  let selectedPromt = null;
  // const stylePromts = document.getElementById("select-prompt-container");
  const styleSelectorForm = document.getElementById("style-selector-form");
  const transformInfoContainer = document.getElementById("transform-info");

  // luego creamos una funcion para hacerlo completamnte aleatorio
  let isLoading = false;
  let promt = randomState();
  const loader = document.getElementById("loader");

  if (widget) {
    widget.addEventListener("clduploadwidget:success", ((
      e: CustomEvent<{ info: { public_id: string } }>
    ) => {
      const selectStyle = document.getElementById("style-selector-button");
      selectStyle.style.display = "flex";
      const uploadSection = document.getElementById("upload-section");
      uploadSection.style.display = "none";
      const previewImageContainer = document.getElementById(
        "preview-image-container"
      );
      previewImageContainer.style.display = "flex";
      const transformImg = document.createElement("img");
      transformImg.src = "./transform.svg";
      transformImg.className = "size-[42px]";

      // loader.removeAttribute("style");
      const public_id = e.detail.info.public_id;
      // instancia con la public-ip
      const previewResponse = transformerModel(public_id, promt);
      previewResponse.getImageUrl();
      previewResponse.showTransformerMenu();
      const transformInfoContainer = document.getElementById("transform-info");
      const transformButton = document.createElement("button");
      transformButton.className =
        "flex gap-4 items-center bg-custom-linear uppercase transition-opacity duration-300 hover:opacity-80 text-white font-bold py-4 px-8 rounded-xl transition ease text-2xl mt-2";
      transformButton.textContent = "Transformar";
      transformButton.appendChild(transformImg);
      transformInfoContainer.appendChild(transformButton);

      // transformButton.disabled = true;
      transformButton.addEventListener("click", () => {
        previewImageContainer.style.display = "none";
        previewResponse.renderPreview();
        loader.removeAttribute("style");
        transformButton.remove();
      });

      const transformDataContainer = document.getElementById(
        "transform-data-container"
      );
      transformDataContainer.removeAttribute("style");
    }) as EventListener);
  }

  if (styleSelectorForm) {
    styleSectionsPromts.forEach((section) => {
      const title = document.createElement("h2");
      title.textContent = section.name;
      title.className =
        "text-3xl dark:text-white semibold flex items-center border-b-2 border-custom-bg-dark pb-4";
      styleSelectorForm.appendChild(title);
      const styleSection = document.createElement("section");
      styleSection.id = section.name;
      styleSection.className =
        "w-full  grid grid-cols-1 md-lg-6:grid-cols-2  md-lg-5:grid-cols-3  md-lg-4:grid-cols-4  md-lg-3:grid-cols-5 md-lg-0:grid-cols-10 gap-4 md-lg-1:grid-cols-8 md-lg-2:grid-cols-6 ";
      styleSelectorForm.appendChild(styleSection);
    });
    promtsOptions.forEach((option) => {
      const previewImageContainer = document.getElementById(
        "preview-image-container"
      );
      const buttonCldUploadWidget = document.getElementById("cdWidget");
      const selectedSection = document.getElementById(option.type);

      // Crear un contenedor para la tarjeta
      const cardContainer = document.createElement("div");
      cardContainer.className =
        "border rounded-lg shadow-lg overflow-hidden m-2 bg-white dark:bg-gray-800 transition-transform duration-300 transform hover:scale-105";

      // Crear el título
      const title = document.createElement("h3");
      title.innerText = option.name; // Usar el nombre de la opción como título
      title.className = "text-center font-bold text-md p-1 dark:text-white"; // Reducir el tamaño de fuente y padding

      // Crear el contenedor para la imagen
      const imageContainer = document.createElement("div");
      imageContainer.className = "relative";

      const stylePromt = document.createElement("img");
      stylePromt.src = option.src;
      stylePromt.className = "w-full h-[250px] object-cover hover:opacity-80"; // Asegurarte de que la imagen tenga un tamaño fijo

      // Crear un overlay para el nombre
      const nameOverlay = document.createElement("span");
      nameOverlay.innerText = option.name;
      nameOverlay.className =
        "absolute bottom-0 left-0 right-0 bg-black bg-opacity-70 text-white text-center p-1 opacity-0 transition-opacity duration-300";

      // Mostrar el nombre al hacer hover sobre el contenedor
      imageContainer.addEventListener("mouseenter", () => {
        nameOverlay.classList.remove("opacity-0");
        nameOverlay.classList.add("opacity-100");
      });

      imageContainer.addEventListener("mouseleave", () => {
        nameOverlay.classList.remove("opacity-100");
        nameOverlay.classList.add("opacity-0");
      });

      // Agregar la imagen y el overlay al contenedor de imagen
      imageContainer.appendChild(stylePromt);
      imageContainer.appendChild(nameOverlay);

      // Agregar el título y el contenedor de imagen a la tarjeta
      cardContainer.appendChild(title);
      cardContainer.appendChild(imageContainer);

      // Agregar la tarjeta a la sección seleccionada
      selectedSection.appendChild(cardContainer);

      // Evento para manejar el clic
      stylePromt.addEventListener("click", () => {
        promt = option.value; // Asignar el valor de la opción seleccionada
        dialog.close(); // Cerrar el diálogo
        previewImageContainer.style.display = "flex"; // Mostrar el contenedor de previsualización
        buttonCldUploadWidget.style.display = "flex"; // Mostrar el botón de carga
      });
    });
  }

  const startedButton = document.getElementById("started-button");
  startedButton.addEventListener("click", () => {
    dialog.showModal();
    startedButton.style.display = "none";
  });

  const selectorButton = document.getElementById("style-selector-button");
  if (selectorButton) {
    selectorButton.addEventListener("click", () => {
      const previewImageContainer = document.getElementById(
        "preview-image-container"
      );
      previewImageContainer.style.display = "none";
      const newBUtton = document.getElementById("started-button");
      newBUtton.style.display = "flex";
      newBUtton.className =
        "flex gap-4 items-center bg-custom-linear uppercase transition-opacity duration-300 hover:opacity-80 text-white font-bold py-6 px-12 rounded-xl transition ease text-3xl m-2";
      newBUtton.textContent = "Get started";
      const transformDataContainer = document.getElementById(
        "transform-data-container"
      );
      transformDataContainer.appendChild(newBUtton);
      // window.location.reload();
    });
  }
</script>
